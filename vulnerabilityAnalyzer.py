import requests
from bs4 import BeautifulSoup

def analyze_vulnerabilities(url):
    # Make a GET request to the URL
    response = requests.get(url)

    # Parse the HTML content of the response using BeautifulSoup
    soup = BeautifulSoup(response.content, 'html.parser')

    # Find all the input fields in the HTML form
    input_fields = soup.find_all('input')

    # Check if any of the input fields have "autocomplete" attribute set to "off"
    for input_field in input_fields:
        if input_field.has_attr('autocomplete') and input_field['autocomplete'] == 'off':
            print(f"Potential vulnerability found: 'autocomplete' attribute of input field '{input_field.get('name')}' is set to 'off'.")

    # Check if the site is vulnerable to cross-site scripting (XSS) attacks
    if '<script>' in response.text:
        print("Potential vulnerability found: The site is vulnerable to XSS attacks.")

    # Check if the site is vulnerable to SQL injection attacks
    if 'SQL syntax' in response.text:
        print("Potential vulnerability found: The site is vulnerable to SQL injection attacks.")

    # Check if the site is vulnerable to clickjacking attacks
    if 'X-Frame-Options' not in response.headers:
        print("Potential vulnerability found: The site is vulnerable to clickjacking attacks.")

    # Check if the site is vulnerable to cross-site request forgery (CSRF) attacks
    if 'csrf_token' not in response.cookies:
        print("Potential vulnerability found: The site is vulnerable to CSRF attacks.")

    # Check if the site is vulnerable to remote file inclusion (RFI) attacks
    if 'include' in response.text:
        print("Potential vulnerability found: The site is vulnerable to RFI attacks.")

    # Check if the site is vulnerable to local file inclusion (LFI) attacks
    if 'open(' in response.text:
        print("Potential vulnerability found: The site is vulnerable to LFI attacks.")

    # Check if the site is vulnerable to directory traversal attacks
    if '../' in response.text:
        print("Potential vulnerability found: The site is vulnerable to directory traversal attacks.")

    # Check if the site is vulnerable to path traversal attacks
    if '..\\' in response.text:
        print("Potential vulnerability found: The site is vulnerable to path traversal attacks.")

    # Print a message if no vulnerabilities were found
    if all(vulnerability is None for vulnerability in [input_fields, '<script>' in response.text, 'SQL syntax' in response.text,
                                                      'X-Frame-Options' in response.headers, 'csrf_token' in response.cookies,
                                                      'include' in response.text, 'open(' in response.text, '../' in response.text,
                                                      '..\\' in response.text]):
        print("No vulnerabilities found.")

# Example usage
analyze_vulnerabilities('https://xss-game.appspot.com/level1/frame')
